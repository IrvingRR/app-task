{"version":3,"sources":["components/FormTask.js","components/TaskElement.js","components/TasksList.js","App.js","reportWebVitals.js","index.js"],"names":["FormTask","addTask","useState","inputTask","setInputTask","form","setForm","id","title","completed","task","setTask","expressionTask","Form","className","onSubmit","e","preventDefault","setTimeout","target","reset","GroupInput","Input","type","name","placeholder","valid","autoComplete","onChange","prevTask","uuid","value","onKeyUp","test","MessageInput","icon","faTimes","Button","MessageError","styled","div","input","props","css","button","TaskElement","toggleTask","deleteTask","Row","Cell","Label","htmlFor","toString","IconCheck","faCheck","CheckBox","checked","ButtonAction","onClick","faTrash","tr","td","label","FontAwesomeIcon","TasksList","tasks","deleteTasksCompleted","length","map","colSpan","filter","App","setTasks","useEffect","storageTasks","JSON","parse","localStorage","getItem","setItem","stringify","prevTasks","newTasks","find","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8abf40b5.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport styled, {css} from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport uuid from 'react-uuid'\r\n\r\nconst FormTask = function ({ addTask }) {\r\n\r\n    // States\r\n    const [inputTask, setInputTask] = useState(null);\r\n    const [form, setForm] = useState(null);\r\n    const [task, setTask] = useState({ id:null, title: '', completed: false });\r\n\r\n    // Expressions\r\n    const expressionTask = /^[a-zA-ZÃ€-Ã¿\\s0-9]{4,40}$/;\r\n\r\n    // Functions\r\n    const hiddenMessageError = () => {\r\n        setTimeout(() => {\r\n            setForm(\"true\");\r\n        }, 3000);\r\n    }\r\n\r\n    const validation = (e) => {\r\n      if(expressionTask.test(e.target.value)) {\r\n          setInputTask(\"true\");\r\n      } else {\r\n            setInputTask(\"false\");\r\n      }\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n\r\n        setTask(prevTask => {\r\n            const newTask = { ...prevTask, id:uuid(), title: e.target.value };\r\n            return newTask;\r\n        });\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(inputTask === 'false' || task.title === '') {\r\n            setForm('false');\r\n            hiddenMessageError();\r\n\r\n        } else {\r\n            setForm('true');\r\n            addTask(task);\r\n            setTask({ id:null, title: '', completed: false });\r\n            e.target.reset();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Form className=\"formTask\" onSubmit={handleSubmit}>\r\n            <GroupInput>\r\n                <Input className=\"formTask-input\" type=\"text\" name=\"task\" placeholder=\"Add new task\" valid={inputTask} autoComplete=\"off\" onChange={handleChange} onKeyUp={validation} />\r\n            </GroupInput>\r\n                <MessageInput valid={inputTask}>\r\n                    <p>Task must have only letters and numbers</p>\r\n                    <FontAwesomeIcon icon={faTimes} />\r\n                </MessageInput>\r\n            <Button className=\"formTask-button\">Add</Button>\r\n            <MessageError form={form}>Please enter a valid value</MessageError>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default FormTask;\r\n\r\nconst Form = styled.form`\r\n  width: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  gap: 16px;\r\n  padding: 20px 30px;\r\n  text-align: center;\r\n`;\r\n\r\nconst GroupInput = styled.div`\r\n    width: 100%;\r\n    height: 50px;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    width: 100%;\r\n    max-width: 300px;\r\n    height: 100%;\r\n    border-radius: 80px;\r\n    border: 2px solid whitesmoke;\r\n    padding: 10px 20px;\r\n    font-family: var(--font);\r\n    font-weight: 600;\r\n    color: #fff;\r\n    background: transparent;\r\n    transition: 0.3s ease;\r\n\r\n    &:focus {\r\n        border-color: #fff;\r\n    }\r\n\r\n    &::placeholder {\r\n        color: whitesmoke;\r\n    }\r\n\r\n    ${props => props.valid === 'false' && css`\r\n        border-color: var(--primary) !important;\r\n    `}\r\n`;\r\n\r\nconst Button = styled.button`\r\n    padding: 10px 20px;\r\n    border-radius: 80px;\r\n    font-weight: 600;\r\n    letter-spacing: 1px;\r\n    background: transparent;\r\n    border: 2px solid #fff;\r\n    color: #fff;\r\n    transition: 0.3s ease;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n    background: #fff;\r\n    color: var(--primary);\r\n    }\r\n`;\r\n\r\nconst MessageInput = styled.div`\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    background: var(--primary);\r\n    color: #fff;\r\n    font-size: 13px;\r\n    transition: 0.3s ease;\r\n    z-index: 100;\r\n    overflow: hidden;\r\n    padding: 0 20px;\r\n    height: 0;\r\n    border-radius: 0;\r\n    opacity: 0;\r\n\r\n    ${props => props.valid === 'false' && css`\r\n        padding: 10px 20px;\r\n        height: 40px;\r\n        opacity: 1;\r\n        border-radius: 30px;\r\n    `}\r\n\r\n    @media only screen and (max-width: 375px) {\r\n        font-size: 12px;\r\n    }\r\n    \r\n`;\r\n\r\nconst MessageError = styled.div`\r\n    width: 100%;\r\n    padding: 0 20px;\r\n    background: var(--gradient-error);\r\n    color: #fff;\r\n    font-weight: 600;\r\n    border-radius: 30px;\r\n    height: 0;\r\n    transition: 0.3s ease;\r\n    font-size: 13px;\r\n    opacity: 0;\r\n    overflow: hidden;\r\n\r\n    ${props => props.form === 'false' && css`\r\n        padding: 10px 20px;\r\n        height: 40px;\r\n        opacity: 1;\r\n    `}\r\n`;","import React from 'react';\r\nimport styled, {css} from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrash, faCheck } from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst TaskElement = function ({ title, completed, id, toggleTask, deleteTask }) {\r\n\r\n    const handleChange = () => {\r\n        toggleTask(id);\r\n    }\r\n\r\n    const handleClick = () => {\r\n        deleteTask(id);\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            <Cell className=\"title-task\">\r\n                <p>{title}</p>\r\n            </Cell>\r\n            <Cell>\r\n                <Label htmlFor={`status-task-${id}`} completed={completed.toString()}>\r\n                    {completed && <IconCheck icon={faCheck} completed={completed.toString()}/> }\r\n                </Label>\r\n                <CheckBox type=\"checkbox\" name=\"status-task\" checked={completed} onChange={handleChange} id={`status-task-${id}`} />\r\n            </Cell>\r\n            <Cell>\r\n                <ButtonAction onClick={handleClick}>\r\n                    <FontAwesomeIcon icon={faTrash}/>\r\n                </ButtonAction>\r\n            </Cell>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default TaskElement;\r\n\r\n/* Styled Compoenents Elements */\r\n\r\nconst Row = styled.tr`\r\n    padding: 10px 0;\r\n`;\r\n\r\nconst Cell = styled.td`\r\n\r\n      &.title-task {\r\n          text-align: left;\r\n      }\r\n\r\n      @media only screen and (max-width: 425px) {\r\n        overflow-x: auto;\r\n        font-size: 12px;\r\n        max-width: 100px;\r\n    }\r\n\r\n    @media only screen and (max-width: 320px) {\r\n        font-size: 11px;\r\n    }\r\n\r\n`;\r\n\r\nconst Label = styled.label`\r\n    display: inline-flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 20px;\r\n    height: 20px;\r\n    padding: 10px;\r\n    border: 1px solid #fff;\r\n    border-radius: 100%;\r\n    background: transparent;\r\n    cursor: pointer;\r\n    transition: 0.3s ease;\r\n\r\n    ${props => props.completed === 'true' && css`\r\n      background: var(--primary);\r\n      border-color: var(--primary);\r\n    `}\r\n\r\n    &:hover {\r\n        border-color: var(--primary);\r\n    }\r\n`;\r\n\r\nconst CheckBox = styled.input`\r\n    display: none;\r\n`;\r\n\r\nconst ButtonAction = styled.button`\r\n    padding: 10px 20px;\r\n    border-radius: 10px;\r\n    background: #ff0d7a70;\r\n    color: #fff;\r\n    cursor: pointer;\r\n    transition: 0.3s ease;\r\n\r\n    &:hover {\r\n        background: var(--primary);\r\n    }\r\n`;\r\n\r\nconst IconCheck = styled(FontAwesomeIcon)`\r\n    color: #fff;\r\n    font-size: 10px;\r\n    transition: 0.3s ease;\r\n    opacity: 1;\r\n    visibility: visible;\r\n`;","import React from 'react';\r\nimport TaskElement from './TaskElement';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrash} from '@fortawesome/free-solid-svg-icons'\r\n\r\nconst TasksList = function ({tasks, toggleTask, deleteTask, deleteTasksCompleted}) {\r\n\r\n    return (\r\n\r\n        <div className=\"tasksList\">\r\n            <h2 className=\"tasksList-title\">My Tasks</h2>\r\n            <table className=\"tasksList-table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th className=\"thead-task\">Task</th>\r\n                        <th>Completed</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {tasks.length > 0\r\n                        ?   tasks.map((task) => <TaskElement deleteTask={deleteTask} toggleTask={toggleTask} id={task.id} key={task.id} title={task.title} completed={task.completed} />)\r\n                        :   <tr>\r\n                                <td colSpan=\"3\" className=\"tasksList-table-message\">No tasks</td>\r\n                            </tr>\r\n                    }\r\n                </tbody>\r\n                <tfoot>\r\n                    <tr>\r\n                        <td className=\"taskLit-table-foot-action\">\r\n                            <button className=\"taskList-table-foot-button\" onClick={deleteTasksCompleted}>\r\n                                <FontAwesomeIcon icon={faTrash} />\r\n                                Delete completed\r\n                            </button>\r\n                        </td>\r\n                        <td colSpan=\"2\" className=\"taskLit-table-foot-amount\">\r\n                            <p>\r\n                                Total pending tasks:\r\n                                <span>\r\n                                    {tasks.filter((task) => task.completed === false).length}\r\n                                </span>\r\n                            </p>\r\n                        </td>\r\n                    </tr>\r\n                </tfoot>\r\n            </table>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default TasksList;","import React, {useState, useEffect} from \"react\";\nimport './App.css';\nimport FormTask from './components/FormTask';\nimport TasksList from './components/TasksList';\n\nfunction App() {\n\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    const storageTasks = JSON.parse(localStorage.getItem('tasks'));\n    if(storageTasks) {\n      setTasks(storageTasks);\n    }\n    \n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n\n  }, [tasks]);\n\n  const addTask = (task) => {\n    setTasks(prevTasks => {\n      const newTasks = [...prevTasks, task];\n      return newTasks;\n    });\n  }\n\n  const toggleTask = (id) => {\n    const newTasks = [...tasks];\n    const task = newTasks.find((task) => task.id === id);\n    task.completed = !task.completed;\n    setTasks(newTasks);\n  }\n\n  const deleteTask = (id) => {\n    const newTasks = tasks.filter((task) => task.id !== id);\n    setTasks(newTasks);\n    console.log(newTasks);\n  }\n\n  const deleteTasksCompleted = () => {\n    const newTasks = tasks.filter((task) => task.completed !== true);\n    setTasks(newTasks);\n  }\n\n  return (\n    <div className=\"App\" >\n      <h1>TaskList App</h1>\n      <main className=\"container\">\n        <FormTask addTask={addTask} />\n        <TasksList tasks={tasks} toggleTask={toggleTask} deleteTask={deleteTask} deleteTasksCompleted={deleteTasksCompleted}/>\n      </main>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}